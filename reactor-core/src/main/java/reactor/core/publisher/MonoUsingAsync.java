/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package reactor.core.publisher;

import java.util.Objects;
import java.util.function.Function;
import java.util.function.Supplier;

import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import reactor.core.CoreSubscriber;
import reactor.core.Fuseable;
import reactor.util.annotation.Nullable;

/**
 * Uses a resource, generated by a supplier for each individual {@link Subscriber},
 * while streaming the values from a {@link Publisher} derived from the same resource.
 * Whenever the resulting sequence terminates, the relevant {@link Function} generates
 * a "cleanup" {@link Publisher} that is invoked but doesn't change the content of the
 * main sequence. Instead it just defers the termination (unless it errors, in which case
 * the error suppresses the original termination signal).
 *
 * @param <T> the value type streamed
 * @param <S> the resource type
 */
final class MonoUsingAsync<T, S> extends Mono<T> implements Fuseable, SourceProducer<T> {

	final Supplier<S>                                      resourceSupplier;
	final Function<? super S, ? extends Mono<? extends T>> resourceClosure;
	final Function<? super S, ? extends Publisher<?>>      asyncComplete;
	final Function<? super S, ? extends Publisher<?>>      asyncError;
	@Nullable
	final Function<? super S, ? extends Publisher<?>>           asyncCancel;

	MonoUsingAsync(Supplier<S> resourceSupplier,
			Function<? super S, ? extends Mono<? extends T>> resourceClosure,
			Function<? super S, ? extends Publisher<?>> asyncComplete,
			Function<? super S, ? extends Publisher<?>> asyncError,
			@Nullable Function<? super S, ? extends Publisher<?>> asyncCancel) {
		this.resourceSupplier = Objects.requireNonNull(resourceSupplier, "resourceSupplier");
		this.resourceClosure = Objects.requireNonNull(resourceClosure, "resourceClosure");
		this.asyncComplete = Objects.requireNonNull(asyncComplete, "asyncComplete");
		this.asyncError = Objects.requireNonNull(asyncError, "asyncError");
		this.asyncCancel = asyncCancel;
	}

	@Override
	@SuppressWarnings("unchecked")
	public void subscribe(CoreSubscriber<? super T> actual) {
		S resource;

		try {
			resource = Objects.requireNonNull(resourceSupplier.get(),
					"The resourceSupplier returned a null value");
		}
		catch (Throwable e) {
			Operators.error(actual, Operators.onOperatorError(e, actual.currentContext()));
			return;
		}

		Mono<? extends T> p;

		try {
			p = Objects.requireNonNull(resourceClosure.apply(resource),
					"The resourceClosure function returned a null value");
		}
		catch (Throwable e) {
			p = Mono.error(e);
		}

		if (p instanceof Fuseable) {
			p.subscribe(new FluxUsingAsync.UsingAsyncFuseableSubscriber<>(actual,
					resource, asyncComplete, asyncError, asyncCancel));
		}
		else if (actual instanceof ConditionalSubscriber) {
			p.subscribe(new FluxUsingAsync.UsingAsyncConditionalSubscriber<>((ConditionalSubscriber<? super T>) actual,
					resource, asyncComplete, asyncError, asyncCancel));
		}
		else {
			p.subscribe(new FluxUsingAsync.UsingAsyncSubscriber<>(actual, resource, asyncComplete, asyncError, asyncCancel));
		}
	}

	@Override
	public Object scanUnsafe(Attr key) {
		return null; //no particular key to be represented, still useful in hooks
	}

}
